// setup canvas

var canvas = document.querySelector('canvas');
var p = document.querySelector('p');
var ctx = canvas.getContext('2d');

var width = canvas.width = window.innerWidth;
var height = canvas.height = window.innerHeight;
var count = 25;

// function to generate random number

function random(min,max) {
  var num = Math.floor(Math.random()*(max-min)) + min;
  return num;
}

function Shape(x,y,velX,velY){
  this.x = x;
  this.y = y;
  this.velX = velX;
  this.velY = velY;
  this.exists = true;
}

// define Ball constructor

function Ball() {
  Shape.call(this,random(0,width),random(0,height),random(-7,7),random(-7,7));
  this.color = 'rgb(' + random(0,255) + ',' + random(0,255) + ',' + random(0,255) +')';
  this.size = random(10,20);
}
Ball.prototype = Object.create(Shape.prototype);
Ball.prototype.constructor = Ball;

// define ball draw method

Ball.prototype.draw = function() {
  ctx.beginPath();
  ctx.fillStyle = this.color;
  ctx.arc(this.x, this.y, this.size, 0, 2 * Math.PI);
  ctx.fill();
}

// define ball update method

Ball.prototype.update = function() {
  if((this.x + this.size) >= width) {
    this.velX = -(this.velX);
  }

  if((this.x - this.size) <= 0) {
    this.velX = -(this.velX);
  }

  if((this.y + this.size) >= height) {
    this.velY = -(this.velY);
  }

  if((this.y - this.size) <= 0) {
    this.velY = -(this.velY);
  }

  this.x += this.velX;
  this.y += this.velY;
}

// define ball collision detection

Ball.prototype.collisionDetect = function() {
  for(j = 0; j < balls.length; j++) {
    if( (!(this.x === balls[j].x && this.y === balls[j].y && this.velX === balls[j].velX && this.velY === balls[j].velY)) ) {
      var dx = this.x - balls[j].x;
      var dy = this.y - balls[j].y;
      var distance = Math.sqrt(dx * dx + dy * dy);

      if (distance < this.size + balls[j].size) {
        balls[j].color = this.color = 'rgb(' + random(0,255) + ',' + random(0,255) + ',' + random(0,255) +')';
      }
    }
  }
}

function EvilCircle(){
  Shape.call(this,random(0,width),random(0,height),20,20);
  this.color = 'white';
  this.size = 20;
}
EvilCircle.prototype = Object.create(Shape.prototype);
EvilCircle.prototype.constructor = EvilCircle;

EvilCircle.prototype.draw = function() {
  ctx.beginPath();
  ctx.lineWidth = 10;
  ctx.strokeStyle = this.color;
  ctx.arc(this.x,this.y,this.size,0,2*Math.PI);
  ctx.stroke();
}

EvilCircle.prototype.checkBounds = function(){
  if((this.x+this.size) > width){
    this.x -= this.size;
  }
  if((this.x-this.size) < 0){
    this.x += this.size;
  }
  if((this.y+this.size) > height){
    this.y -= this.size;
  }
  if((this.y-this.size) > width){
    this.y += this.size;
  }
}

EvilCircle.prototype.collisionDetect = function() {
  for(j = 0; j<balls.length; j++){
    if(balls[j].exists === true){
      var dx = this.x - balls[j].x;
      var dy = this.y - balls[j].y;
      var distance = Math.sqrt(dx * dx + dy * dy);

      if (distance < (this.size + balls[j].size)) {
        balls[j].exists = false;
        p.textContent = "existing balls :" + --count;
      }
    }
  }
}

EvilCircle.prototype.setControlles = function(){
var _this = this;
window.onkeydown = function(e) {
    if (e.keyCode === 65) {
      _this.x -= _this.velX;
    } else if (e.keyCode === 68) {
      _this.x += _this.velX;
    } else if (e.keyCode === 87) {
      _this.y -= _this.velY;
    } else if (e.keyCode === 83) {
      _this.y += _this.velY;
    }
  }
}
// define array to store balls

var balls = [];
var evilCircle = new EvilCircle();
evilCircle.setControlles();
// define loop that keeps drawing the scene constantly

function loop() {
  ctx.fillStyle = 'rgba(0,0,0,0.25)';
  ctx.fillRect(0,0,width,height);

  while(balls.length < 25) {
    var ball = new Ball();
    balls.push(ball);
  }

  for(i = 0; i < balls.length; i++) {
    if(balls[i].exists === true){
    balls[i].draw();
    balls[i].update();
    balls[i].collisionDetect();
    }
  }
    evilCircle.draw();
    evilCircle.checkBounds();
    evilCircle.collisionDetect();

  requestAnimationFrame(loop);
}



loop();
